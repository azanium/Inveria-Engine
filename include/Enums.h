#ifndef _ENUMS_H_
#define _ENUMS_H_

namespace inveria
{
namespace graphics
{

//! Graphics driver state
enum E_DRIVER_TYPE
{
	EDT_NONE		= 0,
	EDT_DIRECT3D9,
	EDT_MAX
};

//! Transformation state
enum E_TRANSFORM_TYPE
{
	ETT_WORLD = 0,
	ETT_VIEW,
	ETT_PROJECTION,
	ETT_MAX
};

//! Render mode state
enum E_RENDER_MODE
{
	ERM_NONE = 0,
	ERM_2DRASTER,
	ERM_ORTHOGONAL,
	ERM_PERSPECTIVE,
	ERM_MAX
};

enum E_PRIMITIVE_TYPE
{
	EPT_NONE			= 0,
	EPT_POINTLIST,
	EPT_LINELIST,
	EPT_LINESTRIP,
	EPT_TRIANGLELIST,
	EPT_TRIANGLESTRIP,
	EPT_TRIANGLEFAN,
	EPT_MAX
};

enum E_ANTIALIAS_SAMPLES
{
	EAS_NONE			= 0,
	EAS_NONMASKABLE		= 1,
	EAS_2_SAMPLES		= 2,
	EAS_3_SAMPLES		= 3,
	EAS_4_SAMPLES		= 4,
	EAS_5_SAMPLES		= 5,
	EAS_6_SAMPLES		= 6,
	EAS_7_SAMPLES		= 7,
	EAS_8_SAMPLES		= 8,
	EAS_9_SAMPLES		= 9,
	EAS_10_SAMPLES		= 10,
	EAS_11_SAMPLES		= 11,
	EAS_12_SAMPLES		= 12,
	EAS_13_SAMPLES		= 13,
	EAS_14_SAMPLES		= 14,
	EAS_15_SAMPLES		= 15,
	EAS_16_SAMPLES		= 16,
	EAS_MAX_SAMPLES		= 0x7fffffff
};

enum E_BUFFER_TYPE
{
	EBT_STATIC_BUFFER		= 0,
	EBT_DYNAMIC_BUFFER
};

#define VERTEXFLAG_F32     3
#define VERTEXFLAG_POINT2F 0
#define VERTEXFLAG_POINT3F 1 
#define VERTEXFLAG_POINT4F 2

#define VERTEXFLAG_TEXCOORD_F32(CoordIndex)     ( VERTEXFLAG_F32     << ( CoordIndex * 2 + 16 ) ) 
#define VERTEXFLAG_TEXCOORD_POINT2F(CoordIndex) ( VERTEXFLAG_POINT2F ) 
#define VERTEXFLAG_TEXCOORD_POINT3F(CoordIndex) ( VERTEXFLAG_POINT3F << ( CoordIndex * 2 + 16 ) ) 
#define VERTEXFLAG_TEXCOORD_POINT4F(CoordIndex)	( VERTEXFLAG_POINT4F << ( CoordIndex * 2 + 16 ) )

enum E_VERTEX_FLAGS
{
	EVF_XYZ = 0x002, 
	EVF_XYZW = 0x4002,
	EVF_NORMAL = 0x010,
	EVF_POINTSIZE = 0x020,
	EVF_DIFFUSE = 0x040,
	EVF_SPECULAR = 0x080,

	// Number of textures
	EVF_TEXCOUNT0 = 0x000,
	EVF_TEXCOUNT1 = 0x100,
	EVF_TEXCOUNT2 = 0x200,
	EVF_TEXCOUNT3 = 0x300,
	EVF_TEXCOUNT4 = 0x400,
	EVF_TEXCOUNT5 = 0x500,
	EVF_TEXCOUNT6 = 0x600,
	EVF_TEXCOUNT7 = 0x700,
	EVF_TEXCOUNT8 = 0x800,

	// 1D textures
	EVF_TEX1D0 = VERTEXFLAG_TEXCOORD_F32(0),
	EVF_TEX1D1 = VERTEXFLAG_TEXCOORD_F32(1),
	EVF_TEX1D2 = VERTEXFLAG_TEXCOORD_F32(2),
	EVF_TEX1D3 = VERTEXFLAG_TEXCOORD_F32(3),
	EVF_TEX1D4 = VERTEXFLAG_TEXCOORD_F32(4),
	EVF_TEX1D5 = VERTEXFLAG_TEXCOORD_F32(5),
	EVF_TEX1D6 = VERTEXFLAG_TEXCOORD_F32(6),
	EVF_TEX1D7 = VERTEXFLAG_TEXCOORD_F32(7),

	// 2D textures
	EVF_TEX2D0 = VERTEXFLAG_TEXCOORD_POINT2F(0),
	EVF_TEX2D1 = VERTEXFLAG_TEXCOORD_POINT2F(1),
	EVF_TEX2D2 = VERTEXFLAG_TEXCOORD_POINT2F(2),
	EVF_TEX2D3 = VERTEXFLAG_TEXCOORD_POINT2F(3),
	EVF_TEX2D4 = VERTEXFLAG_TEXCOORD_POINT2F(4),
	EVF_TEX2D5 = VERTEXFLAG_TEXCOORD_POINT2F(5),
	EVF_TEX2D6 = VERTEXFLAG_TEXCOORD_POINT2F(6),
	EVF_TEX2D7 = VERTEXFLAG_TEXCOORD_POINT2F(7),
	
	// 3D textures
	EVF_TEX3D0 = VERTEXFLAG_TEXCOORD_POINT3F(0),
	EVF_TEX3D1 = VERTEXFLAG_TEXCOORD_POINT3F(1),
	EVF_TEX3D2 = VERTEXFLAG_TEXCOORD_POINT3F(2),
	EVF_TEX3D3 = VERTEXFLAG_TEXCOORD_POINT3F(3),
	EVF_TEX3D4 = VERTEXFLAG_TEXCOORD_POINT3F(4),
	EVF_TEX3D5 = VERTEXFLAG_TEXCOORD_POINT3F(5),
	EVF_TEX3D6 = VERTEXFLAG_TEXCOORD_POINT3F(6),
	EVF_TEX3D7 = VERTEXFLAG_TEXCOORD_POINT3F(7),
	
	// 4D textures
	EVF_TEX4D0 = VERTEXFLAG_TEXCOORD_POINT4F(0),
	EVF_TEX4D1 = VERTEXFLAG_TEXCOORD_POINT4F(1),
	EVF_TEX4D2 = VERTEXFLAG_TEXCOORD_POINT4F(2),
	EVF_TEX4D3 = VERTEXFLAG_TEXCOORD_POINT4F(3),
	EVF_TEX4D4 = VERTEXFLAG_TEXCOORD_POINT4F(4),
	EVF_TEX4D5 = VERTEXFLAG_TEXCOORD_POINT4F(5),
	EVF_TEX4D6 = VERTEXFLAG_TEXCOORD_POINT4F(6),
	EVF_TEX4D7 = VERTEXFLAG_TEXCOORD_POINT4F(7)
};

enum E_VERTEX_TYPE
{
	EVT_VERTEX_P		= 0,
	EVT_VERTEX_PC,
	EVT_VERTEX_PT,
	EVT_VERTEX_PTT,
	EVT_VERTEX_PCT,
	EVT_VERTEX_PN,
	EVT_VERTEX_PNT,
	EVT_VERTEX_PNTT,
	EVT_VERTEX_PTTT,
	EVT_VERTEX_PNTTGB,
	EVT_VERTEX_MAX
};

}	// namespace graphics
}	// namespace inveria

#endif	// _ENUMS_H_
